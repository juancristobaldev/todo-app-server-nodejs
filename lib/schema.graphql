type User {
  id: Int!
  name: String!
  email: String!
  pass: String!
  token: String!
  tasks: [Task]
}

type Task {
  id: Int!
  name: String!
  user: User
  dateCreated: String!
  dates: [Date]
}

type Date {
  id: Int!
  date: String!
  tasks: [Task]
  status: Boolean!
}

type Query {
  getTask(id: Int!): Task
  getTasks: [Task]
  getUser: User
  getUsers: [User]
  getTasksByDate(date: String!): [Task]
}

input CreateUserInput {
  name: String!
  email: String!
  pass: String!
  passConfirm: String!
}

input UpdateUserInput {
  name: String
  email: String
  pass: String
}

input SignInUserInput {
  email: String!
  pass: String!
}

input CreateTaskInput {
  name: String!
}

input UpdateTaskInput {
  id: Int!
  name: String
  status: String
  where: String
  date: String
}

input DeleteTaskInput {
  id: Int!
}

type Mutation {
  createUser(input: CreateUserInput!): Output
  updateUser(input: UpdateUserInput!): Output
  deleteUser: Output
  signInUser(input: SignInUserInput!): OutputSignIn
  createTask(input: CreateTaskInput!): Output
  updateTask(input: UpdateTaskInput!): Output
  deleteTask(input: DeleteTaskInput!): Output
}

type Output {
  errors: String
  success: Boolean
}
type OutputUser {
  errors: String
  success: Boolean
  user: String
}

type OutputSignIn {
  errors: String
  success: Boolean
  token: String
}
